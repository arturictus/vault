#![allow(dead_code)]
use crate::error::{Error, Result};

use rsa::pkcs8::der::oid::db::rfc4519::O;
use secrecy::zeroize;
use serde::{Deserialize, Serialize};
use yubikey::{YubiKey, piv};
// Remove unused import
use base64::Engine;
use rand::RngCore;
// Import the correct traits
use yubikey::{
    MgmKey, PinPolicy, Serial, TouchPolicy,
    certificate::{Certificate, yubikey_signer},
    piv::{AlgorithmId, Key, ManagementSlotId, RetiredSlotId, SlotId},
};

pub fn generate_key(serial: u32, pin: String) -> Result<()> {
    let serial = yubikey::Serial::from(serial);
    let mut yubikey = YubiKey::open_by_serial(serial)
        .map_err(|e| Error::YubiKeyError(format!("Failed to open YubiKey: {}", e)))?;
    let slot = piv::SlotId::KeyManagement;
    let new_key = piv::generate(
        &mut yubikey,
        slot,
        AlgorithmId::Rsa2048,
        yubikey::PinPolicy::Once,
        yubikey::TouchPolicy::Never,
    )?;
    println!("Generated new key: {:?}", new_key);
    Ok(())
}

pub fn setup_yubikey(serial: u32, pin: String) -> Result<()> {
    // Try to open YubiKey by serial number
    let serial = yubikey::Serial::from(serial);

    let mut yubikey = YubiKey::open_by_serial(serial)
        .map_err(|e| Error::YubiKeyError(format!("Failed to open YubiKey: {}", e)))?;
    // Verify PIN directly on the YubiKey
    yubikey
        .verify_pin(pin.as_bytes())
        .map_err(|e| Error::YubiKeyError(format!("PIN verification failed: {}", e)))?;

    // Use the Management key slot for encryption (slot 9D)
    let slot = piv::SlotId::KeyManagement;

    let new_key = piv::generate(
        &mut yubikey,
        slot,
        AlgorithmId::Rsa2048,
        yubikey::PinPolicy::Once,
        yubikey::TouchPolicy::Never,
    )?;
    println!("Generated new key: {:?}", new_key);
    Ok(())
}

/// Encrypt data using YubiKey
/// TODO: Unable to get the public key from the YubiKey
/// public key should be provided by user or generated by the YubiKey
pub fn encrypt_with_yubikey(yubikey_serial: u32, pin: String, data: &str) -> Result<String> {
    // Try to open YubiKey by serial number
    let serial = yubikey::Serial::from(yubikey_serial);
    let mut yubikey = YubiKey::open_by_serial(serial)
        .map_err(|e| Error::YubiKeyError(format!("Failed to open YubiKey: {}", e)))?;

    // Verify PIN directly on the YubiKey
    yubikey
        .verify_pin(pin.as_bytes())
        .map_err(|e| Error::YubiKeyError(format!("PIN verification failed: {}", e)))?;

    // Use the Management key slot for encryption (slot 9D)
    let slot = piv::SlotId::KeyManagement;

    // Get certificate from the slot
    // Try to get metadata first (works on firmware 5.2.3+)
    let cert_result = match piv::metadata(&mut yubikey, slot) {
        Ok(metadata) => {
            println!("Metadata: {:?}", metadata);
            Ok(())
        }
        Err(yubikey::Error::NotSupported) => {
            // For older firmware, try to read the certificate directly
            // This approach works on pre-5.2.3 firmware
            // match piv::read_certificate(&mut yubikey, slot) {
            //     Ok(cert) => {
            //         println!("Certificate found: subject={}", cert.subject());
            //         Ok(())
            //     },
            //     Err(e) => Err(e)
            // }
            Err(yubikey::Error::NotSupported)
        }
        Err(e) => Err(e),
    }; // For now just check if metadata works
    if cert_result.is_err() {
        return Err(Error::YubiKeyError(
            "No certificate found in slot 9D".to_string(),
        ));
    }

    // TODO: Implement encryption
    //    piv::read_public_key(piv::AlgorithmId::Rsa2048, &mut yubikey, slot).unwrap();
    // let encrypted = yubikey.encrypt_data(data.as_bytes(), slot);

    let encrypted = data.as_bytes().to_vec();
    let encoded = base64::engine::general_purpose::STANDARD.encode(&encrypted);

    return Ok(encoded);
}

#[cfg(test)]
mod test {
    use super::*;
    use yubikey::{
        YubiKey,
        piv::{AlgorithmId, SlotId, decrypt_data},
    };

    #[test]
    fn test_setup_yubikey() {
        let serial = 13062801;
        let pin = "123456".to_string();
        let result = setup_yubikey(serial, pin);
        println!("{:?}", result);
        assert!(result.is_ok());
    }

    #[test]
    fn test_get_metadata() {
        let mut yubikey = YubiKey::open().unwrap();

        let slot = SlotId::KeyManagement;
        // let algorithm = AlgorithmId::Rsa2048;

        let pin = "123456";
        yubikey.verify_pin(pin.as_bytes()).unwrap();

        // Get certificate from the slot
        piv::metadata(&mut yubikey, slot).unwrap();
    }
}
